------Proyecto senderos - lenguajes de bases de datos - grupo 1---------------

----------Creación de un usuario para la bd--------------------

select * from system_privilege_map;
alter session set "_ORACLE_SCRIPT" =true;
CREATE USER GRUPO1 IDENTIFIED BY GRUPO1;
GRANT all privileges TO GRUPO1;
CREATE TABLESPACE  PROYECTOLDB
    DATAFILE 'D:\ORACLEDATOSINSTALLER\ORADATA\ORCL\PROYECTOLDB.DBF'
    SIZE 200M AUTOEXTEND ON
    NEXT 10M MAXSIZE 300M;

ALTER USER GRUPO1 DEFAULT TABLESPACE PROYECTOLDB;
ALTER USER GRUPO1 quota unlimited on PROYECTOLDB;

CONN GRUPO1/GRUPO1;

SELECT
    df.file#,
    df.ts#,
    df.name,
    ts.ts#,
    ts.name
FROM
    v$datafile     df,
    v$tablespace   ts
WHERE
    ts.con_id = 1
    AND df.ts# = ts.ts#
    AND df.con_id = ts.con_id;
    
----------BUSQUEDA DE UN USUARIO POR MEDIO DE CORREO------------
------Hay tablas arriba de procedimientos, estas solo son referencias para la creación de estos-------
create table EMPLOYEES (
id_employees int generated by default as identity,
nombre_completo varchar (60),
correo varchar (60),
primary key (id_employees)
);

INSERT INTO EMPLOYEES (nombre_completo, correo) VALUES ('Javier Murillo Víquez', 'jemuvic@hotmail.com');
INSERT INTO EMPLOYEES (nombre_completo, correo) VALUES ('Laura Segreda Elizondo', 'jsegreda@hotmail.com');
INSERT INTO EMPLOYEES (nombre_completo, correo) VALUES ('Walter Quiros Arias', 'wquiros@hotmail.com');
INSERT INTO EMPLOYEES (nombre_completo, correo) VALUES ('Theo Zuniga Ledezma', 'jzuniga@hotmail.com');
SELECT*FROM EMPLOYEES;

Set Serveroutput on;

CREATE OR REPLACE PROCEDURE CONSULTA_USUARIOS(P_CORREO IN VARCHAR)
AS
VAR_EMPLOYEE EMPLOYEES%ROWTYPE;
BEGIN
SELECT id_employees, nombre_completo, correo
INTO VAR_EMPLOYEE.id_employees, VAR_EMPLOYEE.nombre_completo, VAR_EMPLOYEE.correo
FROM EMPLOYEES
WHERE correo = P_CORREO;
DBMS_OUTPUT.PUT_LINE( 'Información del usuario: ID='||VAR_EMPLOYEE.id_employees||' |Nombre: '||VAR_EMPLOYEE.nombre_completo||' |Correo: '||VAR_EMPLOYEE.correo);
EXCEPTION
  WHEN no_data_found THEN
DBMS_OUTPUT.PUT_LINE('El usuario que busca no existe');
  WHEN too_many_rows THEN
DBMS_OUTPUT.PUT_LINE('Existen muchos registros');
  WHEN others THEN
DBMS_OUTPUT.PUT_LINE('Error del sistema');
END;

EXECUTE CONSULTA_USUARIOS('jemuvic@hotmail.com');


-----------------PROCEDIMIENTO PARA VER TODOS LOS USUARIOS DISPONIBLES--------------------------------------------
CREATE OR REPLACE PROCEDURE LISTA_USUARIOS
AS
CURSOR C_EMPLOYEES IS SELECT id_employees, nombre_completo, correo FROM EMPLOYEES
where id_employees = id_employees;
BEGIN
FOR VAR_EMPLOYEE IN C_EMPLOYEES
LOOP
DBMS_OUTPUT.PUT_LINE( 'ID='||VAR_EMPLOYEE.id_employees||' | Nombre: '||VAR_EMPLOYEE.nombre_completo||' | Correo: '||VAR_EMPLOYEE.correo);
END LOOP;
END;

EXECUTE LISTA_USUARIOS;

-----------------------------CRUD PARA SENDEROS--------------------------------------------------------------

create table SENDEROS (
id_sendero int generated by default as identity,
nombre varchar (50),
direccion varchar (100),
dificultad varchar (30),
kilometros int,
clima varchar (20),
horario varchar (20),
duracion varchar (5),
id_employee number(10),
id_articulo number(10),
primary key (id_sendero)
);

---------HEADER
CREATE OR REPLACE PACKAGE CRUD_SENDEROS
IS  
    PROCEDURE INSERTAR(p_nombre IN VARCHAR, p_direccion IN VARCHAR, p_dificultad IN VARCHAR, p_kilometros IN NUMBER, p_clima IN VARCHAR, p_horario IN VARCHAR, p_duracion IN VARCHAR, p_id_employee IN NUMBER, p_id_articulo IN NUMBER);
    FUNCTION BORRAR(fid_sendero IN NUMBER) RETURN VARCHAR;
    FUNCTION BORRAR_TODO RETURN VARCHAR;
    PROCEDURE MODIFICAR(p_codigo IN NUMBER, p_nombre IN VARCHAR, p_direccion IN VARCHAR, p_dificultad IN VARCHAR, p_kilometros IN NUMBER, p_clima IN VARCHAR, p_horario IN VARCHAR, p_duracion IN VARCHAR, p_id_employee IN NUMBER, p_id_articulo IN NUMBER);
END;

-------BODY
CREATE OR REPLACE PACKAGE BODY CRUD_SENDEROS
IS
PROCEDURE INSERTAR(p_nombre IN VARCHAR, p_direccion IN VARCHAR, p_dificultad IN VARCHAR, p_kilometros IN NUMBER, p_clima IN VARCHAR, p_horario IN VARCHAR, p_duracion IN VARCHAR, p_id_employee IN NUMBER, p_id_articulo IN NUMBER)
    AS
    BEGIN
    INSERT INTO SENDEROS(nombre, direccion, dificultad, kilometros, clima, horario, duracion, id_employee, id_articulo)
           VALUES (p_nombre, p_direccion, p_dificultad, p_kilometros, p_clima, p_horario, p_duracion, p_id_employee, p_id_articulo);
    END;
    FUNCTION BORRAR(fid_sendero IN NUMBER) RETURN VARCHAR
    IS
    s_mensaje_accion VARCHAR2(10000);
    BEGIN
        DELETE 
        FROM SENDEROS sen
        WHERE sen.id_sendero = fid_sendero;
        IF sql%rowcount>0 THEN
        s_mensaje_accion := 'Se ha borrado el sendero y sus datos';
        ELSE 
         s_mensaje_accion := 'No se ha podido eliminar el sendero y sus datos';
        END IF;
    RETURN s_mensaje_accion;
    END;
    FUNCTION BORRAR_TODO RETURN VARCHAR
    IS 
    s_mensaje_accion VARCHAR2(10000);
    BEGIN
        DELETE
        FROM SENDEROS; 
        IF sql%rowcount>0 THEN
            s_mensaje_accion := 'Se han borrado los senderos y sus datos';
        ELSE 
            s_mensaje_accion := 'No se ha podido eliminar los senderos y sus datos';
        END IF;
    RETURN s_mensaje_accion;
    END;
PROCEDURE MODIFICAR(p_codigo IN NUMBER, p_nombre IN VARCHAR, p_direccion IN VARCHAR, p_dificultad IN VARCHAR, p_kilometros IN NUMBER, p_clima IN VARCHAR, p_horario IN VARCHAR, p_duracion IN VARCHAR, p_id_employee IN NUMBER, p_id_articulo IN NUMBER)
    AS
    BEGIN
    UPDATE SENDEROS sen
    SET sen.nombre = p_nombre,
    sen.direccion = p_direccion,
    sen.dificultad = p_dificultad,
    sen.kilometros = p_kilometros,
    sen.clima = p_clima,
    sen.horario = p_horario,
    sen.duracion = p_duracion,
    sen.id_employee = p_id_employee,
    sen.id_articulo = p_id_articulo
    WHERE sen.id_sendero = p_codigo;
    END;
END;

--------EJECUCIONES DE PAQUETES
set serveroutput on;

---REFERENCIA PARA INSERTS-----
p_nombre IN VARCHAR, p_direccion IN VARCHAR, p_dificultad IN VARCHAR, p_kilometros IN NUMBER, p_clima IN VARCHAR, p_horario IN VARCHAR, p_duracion IN VARCHAR, p_id_employee IN NUMBER, p_id_articulo IN NUMBER
--------------------------------

---INSERTAR
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Heredia','CalleEtc','Medio',3,'Nublado','9am a 12pm','4',1,2);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Alajuela','CalleEtc2','Facil',2,'Soleado','12pm a 4pm','4',2,3);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Cartago','CalleEtc3','Dificil',5,'Soleado','08am a 3pm','6',3,1);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Guanacaste','CalleEtc4','Dificil',4,'Soleado','8am a 4pm','4',4,5);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Guanacaste','CalleEtc5','Facil',2,'Soleado/Nublado','6am a 3pm','2',4,1);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Cartago','CalleEtc6','Medio',4,'Soleado/lluvioso','6am a 4pm','4',3,1);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero San Jose','CalleEtc7','Dificil',4,'Soleado','8am a 4pm','4',1,5);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Heredia','CalleEtc8','Dificil',4,'Soleado','8am a 4pm','4',1,2);
EXECUTE CRUD_SENDEROS.INSERTAR ('Sendero Heredia','CalleEtc9','Medio',4,'Soleado/Nublado','5am a 3pm','4',4,2);

SELECT * FROM SENDEROS;

---BORRAR UN SOLO SENDERO

DECLARE 
    s_funcion varchar2(10000);
BEGIN
    s_funcion := CRUD_SENDEROS.BORRAR(2);
    dbms_output.put_line(s_funcion);
END;

SELECT * FROM SENDEROS;
---BORRAR TODO
DECLARE 
    s_funcion varchar2(10000);
BEGIN
    s_funcion := CRUD_SENDEROS.BORRAR_TODO;
    dbms_output.put_line(s_funcion);
END;

---MODIFICAR SENDERO
EXECUTE CRUD_SENDEROS.MODIFICAR(2,'Sendero Turrialba','EtcCalle','Complicado',2,'Lluvioso','12pm a 4pm','4',2,3);

SELECT * FROM SENDEROS;

---------------JOIN CON CURSOR PARA VER LOS SENDEROS CON ARTICULO----------------------------
create or replace procedure VER_ARTICULOS
as
cursor C_ARTICULO is select NOMBRE, CLIMA, nombre_articulo
from SENDEROS S
inner join ARTICULOS A
on  S.ID_ARTICULO = A.ID_ARTICULO;

var_ARTICULO C_ARTICULO%rowtype;

begin
open C_ARTICULO;
loop
fetch C_ARTICULO into
var_ARTICULO.NOMBRE, var_ARTICULO.CLIMA, var_ARTICULO.nombre_articulo;
exit when C_ARTICULO%notfound;
DBMS_OUTPUT.put_line('SENDEROS CON ARTICULOS : ' || var_ARTICULO.NOMBRE ||' '|| var_ARTICULO.CLIMA ||' '|| var_ARTICULO.nombre_articulo);
end loop;
close C_ARTICULO;
end;

EXECUTE VER_ARTICULOS;

---------JOIN CON PARAMETRO Y CURSOR--------------------------------

create or replace procedure EMPLEADO_SENDERO (p_id_empleado IN NUMBER)
as

cursor C_EMPLEADO is select NOMBRE, nombre_completo
from SENDEROS S
inner join EMPLOYEES E
on  S.ID_EMPLOYEE = E.ID_EMPLOYEES
where S.ID_EMPLOYEE = p_id_empleado;

VAR_EMPLEADO C_EMPLEADO%rowtype;

begin
open C_EMPLEADO;
loop
fetch C_EMPLEADO into
VAR_EMPLEADO.NOMBRE, VAR_EMPLEADO.nombre_completo;
exit when C_EMPLEADO%notfound;
DBMS_OUTPUT.put_line('SENDEROS POR EMPLEADO: ' || VAR_EMPLEADO.NOMBRE ||' '|| VAR_EMPLEADO.nombre_completo);
end loop;
close C_EMPLEADO;

end;

-----Se ingresa el id del empleado para ver los senderos creados por el mismo----------
EXECUTE EMPLEADO_SENDERO(4);

SELECT * FROM ARTICULOS;
SELECT * FROM SENDEROS;


---------------- TRIGGERS ---------------------

-- CREACION TABLA PARA AUDITAR LOS CAMBIOS REALIZADOS EN LA TABLA SENDEROS 

CREATE TABLE MODIFICACIONES_SENDEROS(
             ID_MODIFICACION NUMBER GENERATED BY DEFAULT AS IDENTITY,
             ID_SENDERO NUMBER,
             FECHA_MODIFICACION VARCHAR2(30),
             USUARIO_MODIFICACION VARCHAR(35),
             MODIFICACION_REALIZADA VARCHAR(200)
             )
             

---------------- CREACION DEL TRIGGER PARA VERIFICAR LAS MODIFICACIONES A LA TABLA SENDEROS ---------------------
-- EL TRIGGER VALIDA EL CAMPO A MODIFICAR Y GUARDA LOS CAMBIOS QUE SE REALIZAN --
             
CREATE OR REPLACE TRIGGER TR_CONTROL_MODIFICACIONES
AFTER UPDATE ON SENDEROS
FOR EACH ROW

DECLARE
    
    v_mensaje_cambio VARCHAR(200);

BEGIN

    IF UPDATING ('NOMBRE') THEN
        v_mensaje_cambio := 'Se realizó un cambio en el Nombre del Sendero | Nombre anterior: ' || :OLD.NOMBRE || ' | Nombre nuevo: ' || :NEW.NOMBRE;
        
         INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
         VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);
    
    ELSIF UPDATING ('DIRECCION') THEN
        v_mensaje_cambio := 'Se realizó un cambio en la Dirección del Sendero | Dirección anterior: ' || :OLD.DIRECCION || ' | Nombre nueva: ' || :NEW.DIRECCION;
        
         INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
         VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio); 

    ELSIF UPDATING ('DIFICULTAD') THEN
        v_mensaje_cambio := 'Se realizó un cambio en la Dificultad del Sendero | Dificultad anterior: ' || :OLD.DIFICULTAD || ' | Dificultad nueva: ' || :NEW.DIFICULTAD;
    
         INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
         VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio); 
                         
    ELSIF UPDATING ('KILOMETROS') THEN
        v_mensaje_cambio := 'Se realizó un cambio en los Kilómetros del Sendero | Kilómetros anteriores: ' || :OLD.KILOMETROS || ' | Kilómetros nuevos: ' || :NEW.KILOMETROS;
    
            INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
            VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);                           
            
    ELSIF UPDATING ('CLIMA') THEN
        v_mensaje_cambio := 'Se realizó un cambio en el Clima del Sendero | Clima anterior: ' || :OLD.CLIMA || ' | Clima nuevo: ' || :NEW.CLIMA;
    
            INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
            VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);         
        
    ELSIF UPDATING ('HORARIO') THEN
        v_mensaje_cambio := 'Se realizó un cambio en el Horario del Sendero | Horario anterior: ' || :OLD.HORARIO || ' | Horario nuevo: ' || :NEW.HORARIO;
    
            INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
            VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);  
                                                            
    ELSIF UPDATING ('DURACION') THEN
        v_mensaje_cambio := 'Se realizó un cambio en la Duración del Sendero | Duración anterior: ' || :OLD.DURACION || ' | Duración nueva: ' || :NEW.DURACION;
    
            INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
            VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);  
                                                                        
    ELSIF UPDATING ('ID_EMPLOYEE') THEN
        v_mensaje_cambio := 'Se realizó un cambio en el Empleado asignado al Sendero | ID del empleado anterior: ' || :OLD.ID_EMPLOYEE || ' | ID del empleado nuevo: ' || :NEW.ID_EMPLOYEE;
    
            INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
            VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);  
                                                                        
    ELSIF UPDATING ('ID_ARTICULO') THEN
        v_mensaje_cambio := 'Se realizó un cambio en el Articulo del Sendero | ID del artículo anterior: ' || :OLD.ID_ARTICULO || ' | ID del artículo nuevo: ' || :NEW.ID_ARTICULO;
    
            INSERT INTO MODIFICACIONES_SENDEROS(ID_SENDERO, FECHA_MODIFICACION, USUARIO_MODIFICACION, MODIFICACION_REALIZADA)
            VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje_cambio);
    END IF;    

END;

/***********************************************************************************************************************************************************************************************************/
    SELECT *
    FROM SENDEROS;

------------------- PARA PROBAR EL TRIGGER DE MODIFICACION ----------------------------------

/** MODIFICACION EN EL NOMBRE **/

    UPDATE SENDEROS
    SET NOMBRE = 'Sendero Alajuela'
    WHERE ID_SENDERO = 9;
    


/** MODIFICACION EN LA DIRECCION **/

    UPDATE SENDEROS
    SET DIRECCION = 'Calles 8 y 10'
    WHERE ID_SENDERO = 7;

    
/** MODIFICACION EN LA DIFICULTAD **/

    UPDATE SENDEROS
    SET DIFICULTAD = 'Medio'
    WHERE ID_SENDERO = 3;
    

/** MODIFICACION EN LOS KILÓMETROS **/

    UPDATE SENDEROS
    SET KILOMETROS = 6
    WHERE ID_SENDERO = 8;
    
    

/** MODIFICACION EN EL CLIMA **/

    UPDATE SENDEROS
    SET CLIMA = 'Lluvioso'
    WHERE ID_SENDERO = 8;
    


/** MODIFICACION EN EL HORARIO **/

    UPDATE SENDEROS
    SET HORARIO = '7am a 2pm'
    WHERE ID_SENDERO = 6;



/** MODIFICACION EN LA DURACION **/

    UPDATE SENDEROS
    SET DURACION = '7'
    WHERE ID_SENDERO = 6;
    


/** MODIFICACION EN EL ID_EMPLOYEE **/

    UPDATE SENDEROS
    SET ID_EMPLOYEE = 1
    WHERE ID_SENDERO = 6;
    


/** MODIFICACION EN EL ID_ARTICULO **/

    UPDATE SENDEROS
    SET ID_ARTICULO = 3
    WHERE ID_SENDERO = 7;
    
  
---------------------------------- VALIDAR CAMBIOS ----------------------------------------------

    SELECT *
    FROM MODIFICACIONES_SENDEROS;

-------------------------------------------------------------------------------------------------





---------------- CREACION DEL TRIGGER PARA VERIFICAR LAS ELIMINACIONES A LA TABLA SENDEROS ---------------------

-- CREACION TABLA PARA AUDITAR LAS ELIMINACIONES REALIZADAS EN LA TABLA SENDEROS 

CREATE TABLE ELIMINACIONES_SENDEROS(
             ID_ELIMINACION NUMBER GENERATED BY DEFAULT AS IDENTITY,
             ID_SENDERO NUMBER,
             FECHA_ELIMINACION VARCHAR2(30),
             USUARIO_ELIMINACION VARCHAR(35),
             ELIMINACION_REALIZADA VARCHAR(200)
             )

-- EL TRIGGER VALIDA LAS FILAS ELIMINADAS

CREATE OR REPLACE TRIGGER TR_CONTROL_ELIMINACIONES
AFTER DELETE ON SENDEROS
FOR EACH ROW

DECLARE
    
    v_mensaje VARCHAR(300);

BEGIN

    v_mensaje := 'Datos eliminados: Nombre: '|| :OLD.NOMBRE ||' Dirección: '|| :OLD.DIRECCION ||' Dificultad: '|| :OLD.DIFICULTAD 
                 ||' Kilómetros: '|| :OLD.KILOMETROS ||' Clima: '|| :OLD.CLIMA ||' Horario: '|| :OLD.HORARIO ||' Duración: '|| :OLD.DURACION 
                 ||' ID Empleado: '|| :OLD.ID_EMPLOYEE ||' ID Artículo: '|| :OLD.ID_ARTICULO;
    
    INSERT INTO ELIMINACIONES_SENDEROS(ID_SENDERO, FECHA_ELIMINACION, USUARIO_ELIMINACION, ELIMINACION_REALIZADA)
         VALUES(:OLD.ID_SENDERO, TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'), USER, v_mensaje);

END;


------------------- PARA PROBAR EL TRIGGER DE ELIMINACION ------------------------------------

DELETE
FROM SENDEROS
WHERE ID_SENDERO = 9;

DELETE
FROM SENDEROS
WHERE NOMBRE = 'Sendero Heredia';


---------------------------------- VALIDAR ELIMINACIONES ----------------------------------------

SELECT *
FROM ELIMINACIONES_SENDEROS;

-------------------------------------------------------------------------------------------------




---------------- CREACION DEL TRIGGER PARA EVITAR QUE SE REPITAN LOS EMPLEADOS ---------------------

CREATE OR REPLACE TRIGGER TR_EMPLEADOS
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW

DECLARE
    
    CURSOR VALIDACION_EMPL IS
    SELECT emp.nombre_completo, emp.correo
    FROM EMPLOYEES emp;

BEGIN

    FOR emp IN VALIDACION_EMPL LOOP
 
        IF emp.nombre_completo = :NEW.NOMBRE_COMPLETO THEN
        
            raise_application_error(-20000, 'Ya existe un empleado registrado con el Nombre indicado');
            
        ELSIF emp.correo = :NEW.CORREO THEN
            
            raise_application_error(-20001, 'Ya existe un empleado registrado con el Correo indicado');
            
        END IF;     
 
    END LOOP;

END;


------------------- PARA PROBAR EL TRIGGER DE INSERCION ------------------------------------

--INSERCIÓN MISMO NOMBRE, CORREO DIFERENTE

INSERT INTO EMPLOYEES (nombre_completo, correo) VALUES ('Laura Segreda Elizondo', 'lsegreda@hotmail.com'); 


--INSERCIÓN NOMBRE DIFERENTE, MISMO CORREO
INSERT INTO EMPLOYEES (nombre_completo, correo) VALUES ('Luis Zuniga Ledezma', 'jzuniga@hotmail.com');


---------- EN AMBOS CASOS MUESTRA EL ERROR PERSONALIZADO Y NO PERMITE LA INSERCIÓN EN LA TABLA ---------

SELECT *
FROM EMPLOYEES;


---------------TABLAS DEL PROYECTO--------------------------------------------

create table SENDEROS (
id_sendero int generated by default as identity,
nombre varchar (50),
direccion varchar (100),
dificultad varchar (30),
kilometros int,
clima varchar (20),
horario varchar (20),
duracion varchar (5),
id_employee number(10),
id_articulo number(10),
primary key (id_sendero)
);

create table EMPLOYEES (
id_employees int generated by default as identity,
nombre_completo varchar (60),
correo varchar (60),
primary key (id_employees)
);

----l_date para evitar errores-----

create table LOGIN (
id_login int generated by default as identity,
l_date DATE DEFAULT SYSDATE,
id_employees int,
primary key (id_login)
);

ALTER TABLE LOGIN ADD FOREIGN KEY (id_employees) REFERENCES  EMPLOYEES (id_employees);

create table REGISTRO (
id_registro int generated by default as identity,
id_login int,
registro varchar (60),
primary key (id_registro)
);

ALTER TABLE REGISTRO ADD FOREIGN KEY (id_login) REFERENCES  LOGIN (id_login);

create table ARTICULO_SENDERO (
id_artsen int not null,
id_sendero int,
id_articulo int,
primary key (id_artsen)
);

ALTER TABLE ARTICULO_SENDERO ADD FOREIGN KEY (id_sendero) REFERENCES  SENDEROS (id_sendero);

create table ARTICULOS (
id_articulo int generated by default as identity,
nombre_articulo varchar (50),
descripcion varchar (100),
primary key (id_articulo)
);
  
ALTER TABLE ARTICULO_SENDERO ADD FOREIGN KEY (id_articulo) REFERENCES  ARTICULOS (id_articulo);


INSERT INTO ARTICULOS (nombre_articulo, descripcion) VALUES ('Botas', 'Calzado para terreno dificil');
INSERT INTO ARTICULOS (nombre_articulo, descripcion) VALUES ('Capa', 'Capucha para evitar la lluvia');
INSERT INTO ARTICULOS (nombre_articulo, descripcion) VALUES ('Sombrilla', 'Evita las lluvias y las altas temperaturas');
INSERT INTO ARTICULOS (nombre_articulo, descripcion) VALUES ('Cuerdas', 'Articulo para escalar o rapel');

  select * from senderos;
  select * from v$diag_info;
  
  DROP TABLE SENDEROS CASCADE CONSTRAINTS;
  DROP TABLE EMPLOYEES CASCADE CONSTRAINTS;
  DROP TABLE LOGIN CASCADE CONSTRAINTS;
  DROP TABLE REGISTRO CASCADE CONSTRAINTS;
  DROP TABLE ARTICULO_SENDERO CASCADE CONSTRAINTS;
  DROP TABLE ARTICULOS CASCADE CONSTRAINTS;
  
  